"use strict";

// На '.', символы 
// 1. Дана строка 'ahb acb aeb aeeb adcb axeb'. Напишите регулярку, которая найдет строки ahb, acb, aeb по шаблону: буква 'a', любой символ, буква 'b'.

function task1(a){
    return a.match(/a.b/g);
};

// 2. Дана строка 'aba aca aea abba adca abea'. Напишите регулярку, которая найдет строки abba adca abea по шаблону: буква 'a', 2 любых символа, буква 'a'.

function task2(a){
    return a.match(/a..a/g);
}

// 3. Дана строка 'aba aca aea abba adca abea'. Напишите регулярку, которая найдет строки abba и abea, не захватив adca.

function task3(a){
    return a.match(/ab.a/g);
}

// На '+', '*', '?', ()
// 4. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая найдет строки aba, abba, abbba по шаблону: буква 'a', буква 'b' любое количество раз, буква 'a'.

function task4(a){
    return a.match(/ab+a/g);
}

// 5. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая найдет строки aa, aba, abba, abbba по шаблону: буква 'a', буква 'b' любое количество раз (в том числе ниодного раза), буква 'a'.

function task5(a){
    return a.match(/ab*a/g);
}

// 6. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая найдет строки aa, aba по шаблону: буква 'a', буква 'b' один раз или ниодного, буква 'a'.

function task6(a){
    return a.match(/ab?a/g);
}

// 7. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая найдет строки aa, aba, abba, abbba, не захватив abca abea.

function task7(a){
    return a.match(/ab*a/g);
}

// 8. Дана строка 'ab abab abab abababab abea'. Напишите регулярку, которая найдет строки по шаблону: строка 'ab' повторяется 1 или более раз.

function task8(a){
    return a.match(/(ab)+/g);
}

// На экранировку 
// 9. Дана строка 'a.a aba aea'. Напишите регулярку, которая найдет строку a.a, не захватив остальные.

function task9(a){
    return a.match(/a\.a/g);
}

// 10. Дана строка '2+3 223 2223'. Напишите регулярку, которая найдет строку 2+3, не захватив остальные.

function task10(a){
    return a.match(/2\+3/g);
}

// 11. Дана строка '23 2+3 2++3 2+++3 345 567'. Напишите регулярку, которая найдет строки 2+3, 2++3, 2+++3, не захватив остальные (+ может быть любое количество).

function task11(a){
    return a.match(/2\++3/g);
}

// 12. Дана строка '23 2+3 2++3 2+++3 445 677'. Напишите регулярку, которая найдет строки 23, 2+3, 2++3, 2+++3, не захватив остальные.

function task12(a){
    return a.match(/2\+*3/g);
}

// 13. Дана строка '*+ *q+ *qq+ *qqq+ *qqq qqq+'. Напишите регулярку, которая найдет строки *q+, *qq+, *qqq+, не захватив остальные.

function task13(a){
    return a.match(/\*q+\+/g);
}

// На жадность
// 14. Дана строка 'aba accca azzza wwwwa'. Напишите регулярку, которая найдет все строки по краям которых стоят буквы 'a', и заменит каждую из них на '!'. Между буквами a может быть любой символ (кроме a).

function task14(a){
    return a.replace(/a.+?a/g, '!');
}

// На {}
// 15. Дана строка 'aa aba abba abbba abbbba abbbbba'. Напишите регулярку, которая найдет строки abba, abbba, abbbba и только их.

function task15(a){
    return a.match(/ab{2,4}a/g);
}

// 16. Дана строка 'aa aba abba abbba abbbba abbbbba'. Напишите регулярку, которая найдет строки вида aba, в которых 'b' встречается менее 3-х раз (включительно).
 
function task16(a){
    return a.match(/ab{0,3}a/g);
}

// 17. Дана строка 'aa aba abba abbba abbbba abbbbba'. Напишите регулярку, которая найдет строки вида aba, в которых 'b' встречается более 4-х раз (включительно).

function task17(a){
    return a.match(/ab{4,}a/g);
}

// На \s, \S, \w, \W, \d, \D
// 18. Дана строка 'a1a a2a a3a a4a a5a aba aca'. Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними одна цифра.

function task18(a){
    return a.match(/a\da/g);
};

// 19. Дана строка 'a1a a22a a333a a4444a a55555a aba aca'. Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр.

function task19(a){
    return a.match(/a\d+a/g);
};

// 20. Дана строка 'aa a1a a22a a333a a4444a a55555a aba aca'. Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр (в том числе и ноль цифр, то есть строка 'aa').

function task20(a){
    return a.match(/a\d*a/g);
};

// 21. Дана строка 'avb a1b a2b a3b a4b a5b abb acb'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a' и 'b', а между ними - не число.

function task21(a){
    return a.match(/a\Db/g);
};

// 22. Дана строка 'ave a#b a2b a$b a4b a5b a-b acb'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a' и 'b', а между ними - не буква и не цифра.

function task22(a){
    return a.match(/a[^\w\d]b/g);
};

// 23. Дана строка 'ave a#a a2a a$a a4a a5a a-a aca'. Напишите регулярку, которая заменит все пробелы на '!'.

function task23(a){
    return a.replace(/\s/g, '!');
}

// На [], '^' - не, [a-zA-Z], кириллицу 
// 24. Дана строка 'aba aea aca aza axa'. Напишите регулярку, которая найдет строки aba, aea, axa, не затронув остальных.

function task24(a){
    return a.match(/a[bex]a/g);
};
 
// 25. Дана строка'aba aea aca aza axa a.a a+a a*a'. Напишите регулярку, которая найдет строки aba, a.a, a+a, a*a, не затронув остальных.

function task25(a){
    return a.match(/a[b\.\+\*]a/g);
};
 
// 26. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - цифра от 3-х до 7-ми.

function task26(a){
    return a.match(/a[3-7]a/g);
};
 
// 27. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - буква от a до g.

function task27(a){
    return a.match(/a[a-g]a/g);
};
 
// 28. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - буква от a до f и от j до z.

function task28(a){
    return a.match(/a[a-fj-z]a/g);
};
 
// 29. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - буква от a до f и от A до Z.

function task29(a){
    return a.match(/a[a-fA-Z]a/g);
};
 
// 30. Дана строка 'aba aea aca aza axa a-a a#a'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - не 'e' и не 'x'.

function task30(a){
    return a.match(/a[^ex\s]a/g);
};

// 31. Дана строка 'wйw wяw wёw wqw'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'w', а между ними - буква кириллицы.

function task31(a){
    return a.match(/w[а-яА-ЯёЁ]w/g);
};

// На [a-zA-Z] и квантификаторы 
// 32. Дана строка 'aAXa aeffa aGha aza ax23a a3sSa'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - маленькие латинские буквы, не затронув остальных.
 
function task32(a){
    return a.match(/a[a-z]+a/g);
};

// 33. Дана строка 'aAXa aeffa aGha aza ax23a a3sSa'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - маленькие и большие латинские буквы, не затронув остальных.

function task33(a){
    return a.match(/a[a-zA-Z]+a/g);
};

// 34. Дана строка 'aAXa aeffa aGha aza ax23a a3sSa'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - маленькие латинские буквы и цифры, не затронув остальных.

function task34(a){
    return a.match(/a[a-z0-9]+a/g);
};

// 35. Дана строка 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ'. Напишите регулярку, которая найдет все слова по шаблону: любая кириллическая буква любое количество раз.

function task35(a){
    return a.match(/[а-яА-ЯёЁ]+/g);
};

// На '^', '$' 
// 36. Дана строка 'aaa aaa aaa'. Напишите регулярку, которая заменит первое 'aaa' на '!'.

function task36(a){
    return a.replace(/^a{3}/g, '!');
}
 
// 37. Дана строка 'aaa aaa aaa'. Напишите регулярку, которая заменит последнее 'aaa' на '!'.

function task37(a){
    return a.replace(/a{3}$/g, '!');
}

// На '|'
// 38. Дана строка 'aeeea aeea aea axa axxa axxxa'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - или буква 'e' любое количество раз или по краям стоят буквы 'a', а между ними - буква 'x' любое количество раз.

function task38(a){
    return a.match(/ae+a|ax+a/g);
};

// 39. Дана строка 'aeeea aeea aea axa axxa axxxa'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - или буква 'e' два раза или буква 'x' любое количество раз.

function task39(a){
    return a.match(/ae{2}a|ax+a/g);
}

// На обратный слеш \ 
// 40. Дана строка 'a\a abc'. Напишите регулярку, которая заменит строку 'a\a' на '!'.

function task40(a){
    return a.replace(/a\\a/g, '!');
}
 
// 41. Дана строка 'a\a a\\a a\\\a'. Напишите регулярку, которая заменит строку 'a\\\a' на '!'.

function task41(a){
    return a.replace(/a\\\\\\a/g, '!');
}

// На экранировку посложнее
// 42. Дана строка 'bbb /aaa\ bbb /ccc\'. Напишите регулярку, которая найдет содержимое всех конструкций /...\ и заменит их на '!'.

function task42(a){
    return a.replace(/\/.+?\\/g, '!');
}

// На карманы при замене
// 43. Дана строка 'aaa@bbb eee7@kkk'. Напишите регулярку, которая найдет строки по шаблону: любое количество букв и цифр, символ @, любое количество букв и цифр и поменяет местами то, что стоит до @ на то, что стоит после нее. Например, aaa@bbb должно превратиться в bbb@aaa.

function task43(a){
    return a.replace(/(\w+)@(\w+)/g, '$2@$1');
}

// 44. Дана строка вида 'a1b2c3'. Напишите регулярку, которая найдет все цифры и удвоит их количество таким образом: 'a11b22c33' (то есть рядом с каждой цифрой напишет такую же).

function task44(a){
    return a.replace(/(\d)/g, '$1$1');
}

// Задачи на test и match
// 45. С помощью метода test определите, что переданная строка является емэйлом. Примеры емэйлов для тестирования mymail@mail.ru, my.mail@mail.ru, my-mail@mail.ru, my_mail@mail.ru, mail@mail.com, mail@mail.by, mail@yandex.ru.
 
function task45(a){
    let reg = /^[a-zA-Z0-9\.\-\_]+@[a-z]+\.[a-z]{2,3}$/g
    return reg.test(a);
}

// 46. Дана строка с текстом, в котором могут быть емейлы. С помощью match найдите все емэйлы в виде массива.

function task46(a){
    return a.match(/[a-zA-Z0-9\.\-\_]+@[a-z]+\.[a-z]{2,3}/g);
}

// 47. С помощью test определите, что переданная строка является доменом. Примеры доменов: site.ru, site.com, my-site.com.

function task47(a){
    let reg = /^[a-zA-Z0-9\.\-\_]+\.[a-z]{2,3}$/g
    return reg.test(a);
}

// 48. С помощью test определите, что переданная строка является доменом. Примеры доменов: http://site.ru, http://site.com.

function task48(a){
    let reg = /^http\:\/\/[a-zA-Z0-9\.\-\_]+\.[a-z]{2,3}$/g
    return reg.test(a);
}

// 49. С помощью test определите, что переданная строка является доменом вида http://site.ru. Протокол может быть как http, так и https.

function task49(a){
    let reg =/^https?\:\/\/[a-zA-Z0-9\.\-\_]+\.[a-z]{2,3}$/g
    return reg.test(a);
}

// 50. С помощью test определите, что переданная строка начинается с http или с https.

function task50(a){
    let reg = /^https?/g
    return reg.test(a);
}
 
// 51. С помощью test определите, что переданная строка заканчивается расширением txt, html или php.

function task51(a){
    let reg = /txt$|html$|php$/g
    return reg.test(a);
}
 
// 52. С помощью test определите, что переданная строка заканчивается расширением jpg или jpeg.

function task52(a){
    let reg =/jpe?g$/g
    return reg.test(a);
}
 
// 53. С помощью test узнайте является ли строка числом, длиной до 12 цифр.

function task53(a){
    let reg = /^\d{1,12}$/g
    return reg.test(a);
}
 
// 54. Дана строка с буквами, пробелами и цифрами. Найдите сумму всех чисел из данной строки.

function task54(a){
    let arr = [];
    let sum = 0;
    arr = a.match(/\d+/g);

    for(let i=0; i<arr.length; i++){
        let n = parseInt(arr[i]);
        sum = sum + n;
    }
    return sum;     
}

// Задачи на replace
// 55. С помощью replace замените в строке домены вида http://site.ru, http://site.com на <a href="http://site.ru">site.ru</a>.
 
function task55(a){
    return a.replace(/(http:\/\/([a-z0-9]+\.[a-z]{2,3}))/g, '<a href="$1">$2<\/a>');
}

// 56. С помощью replace замените все повторяющиеся пробелы на один.

function task56(a){
    return a.replace(/\s{2,}/g, ' ');
}

// 57. Найдите и удалите все комментарии CSS.

function task57(a){
    return a.replace(/\/\*.*?\*\//g, '');
}
 
// 58. Найдите и удалите все комментарии HTML.

function task58(a){
    return a.replace(/<!--.*?-->/g, '');
}

// На позитивный и негативный просмотр
// 59. С помощью позитивного и негативного просмотра найдите все строки по шаблону 3 буквы a, затем буква b и поменяйте 3 буквы a на знак '!'. То есть из 'aaab' нужно сделать '!b'.

function task59(a){
    return a.replace(/a{3}(?=b)/g, '!');
}

// 60. С помощью позитивного и негативного просмотра найдите все строки по шаблону 3 буквы a, затем любая буква, но не b и поменяйте 3 буквы a на знак '!'. То есть из, к примеру, 'aaaw' нужно сделать '!w', а 'aaab' не поменяется.

function task60(a){
    return a.replace(/a{3}(?!b)/g, '!');
}

// На replace
// 61. Дана строка с целыми числами. С помощью регулярки преобразуйте строку так, чтобы вместо этих чисел стояли их квадраты.

function task61(a){
    return a.replace(/\d+/g, function (match){return match*match});
}

// 62. Дана строка с целыми числами. Найдите числа, стоящие в кавычках и увеличьте их в два раза. Пример: из строки 2aaa'3'bbb'4' сделаем строку 2aaa'6'bbb'8'.

function task62(a){
    return a.replace(/\d+(?=')/g, function(match){return match*2});
}

// 63. Дана строка в которой есть вставки {{текст}}. Найдите все такие вставки и поменяйте в них порядок букв на обратный (то есть из 'текст' нужно сделать 'тскет').
 
function task63(a){
    return a.replace(/([а-я])+(?=}})/g, function(match){return match.split('').reverse().join('')});
}

// 64. Дана строка '23 + 35 ='. Числа могут быть любыми. Выведите на экран результат операции в виде '23 + 35 = 58'.

function task64(a){
    return a.replace(/(\d+)\s\+\s(\d+)\s=/g, function(match, match1, match2){
        let res = parseInt(match1) + parseInt(match2);
        return match + ' ' + res;
    });
}

// Головоломки
// 65. Определите, что год находится в интервале от 1900 до 2100 с помощью одного только регулярного выражения.
 
function task65(a){
    let reg = /19\d\d|20\d\d|2100/g
    return reg.test(a);
}

// 66. С помощью test определите, что переданная строка является корректным временем вида '12:59', '23:41', '00:12', '00:00', '09:15'. Время '24.00', '25.00', '12.60', '12.93', '41.93' является некорректным.
 
function task66(a){
    let reg = /([01][0-9]|2[0-3]):[0-5][0-9]/g
    return reg.test(a);
}

// 67. С помощью test определите, что переданная строка является корректным временем вида '9.59 am', '12.30 pm'.

function task67(a){
    let reg = /(\d|1[0-2])\.[0-5]\d\s[ap]m/g
    return reg.test(a);
}
 
// 68. Удалите одной регуляркой все слова из предложения, содержащие две одинаковые следующие друг за другом буквы.

function task68(a){
    return a.replace(/\s*\w*(\w)\1\w*/g, '');
}
 
// 69. Удалите одной регуляркой все повторяющиеся слова из строки, например для 'dsf xxx xxx sd' должно вернуть 'dsf xxx sd'.

function task69(a){
    return a.replace(/(\w+)\s+\1/g, '$1');
}

// 70. Решите предыдущую задачу с учетом того, что слово может повторяться много раз. Например 'dsf xxx xxx xxx xxx xxx sd' должно вернуть 'dsf xxx sd'.

function task70(a){
    return a.replace(/(\w+)(?:\s+\1)+/g, '$1');
}

module.exports.regs = { 
    task1, task2, task3, task4, task5, task6, task7, task8, task9, task10,
    task11, task12, task13, task14, task15, task16, task17, task18, task19, task20,
    task21, task22, task23, task24, task25, task26, task27, task28, task29, task30,
    task31, task32, task33, task34, task35, task36, task37, task38, task39, task40,
    task41, task42, task43, task44, task45, task46, task47, task48, task49, task50,
    task51, task52, task53, task54, task55, task56, task57, task58, task59, task60,
    task61, task62, task63, task64, task65, task66, task67, task68, task69, task70,
};

